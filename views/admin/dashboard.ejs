<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Flower Shop</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .current-image-preview {
            position: relative;
            display: inline-block;
        }
        
        .current-image-preview img {
            border: 2px solid #e5e7eb;
            border-radius: 0.375rem;
        }

        .group:hover .group-hover\:opacity-100 {
            opacity: 1;
        }
        
        .image-preview-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            gap: 0.5rem;
        }
        
        .image-preview-wrapper {
            position: relative;
            padding-bottom: 100%;
        }
        
        .image-preview-wrapper img {
            position: absolute;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
    </style>
</head>
<body class="bg-gray-100">
    <div class="min-h-screen">
        <!-- Header -->
        <header class="bg-white shadow">
            <div class="max-w-7xl mx-auto py-6 px-4">
                <div class="flex justify-between items-center">
                    <h1 class="text-3xl font-bold text-gray-900">ðŸŒ¸ Flower Shop Admin</h1>
                    <div class="flex items-center space-x-4">
                        <span class="text-sm text-gray-600">Welcome, Admin</span>
                        <button onclick="logout()" 
                                class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md transition-colors">
                            Logout
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <!-- Navigation Tabs -->
        <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex space-x-8 border-b border-gray-200">
                <button onclick="switchTab('products')" 
                        id="products-tab"
                        class="tab-button active py-4 px-1 border-b-2 border-blue-500 font-medium text-sm text-blue-600">
                    Products
                </button>
                <button onclick="switchTab('categories')" 
                        id="categories-tab"
                        class="tab-button py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700">
                    Categories
                </button>
            </div>
        </nav>

        <!-- Main Content -->
        <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
            <!-- Products Tab -->
            <div id="products-content" class="tab-content">
                <div class="mb-6 flex justify-between items-center">
                    <h2 class="text-xl font-semibold text-gray-900">Product Management</h2>
                    <button onclick="showAddProductModal()" 
                            class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md transition-colors">
                        + Add New Product
                    </button>
                </div>

                <div class="bg-white shadow overflow-hidden sm:rounded-lg">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Product
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Category
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Price
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Stock
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Actions
                                </th>
                            </tr>
                        </thead>
                        <tbody id="products-table" class="bg-white divide-y divide-gray-200">
                            <!-- Products will be populated here -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Categories Tab -->
            <div id="categories-content" class="tab-content hidden">
                <div class="mb-6 flex justify-between items-center">
                    <h2 class="text-xl font-semibold text-gray-900">Category Management</h2>
                    <button onclick="showAddCategoryModal()" 
                            class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md transition-colors">
                        + Add New Category
                    </button>
                </div>

                <div class="bg-white shadow overflow-hidden sm:rounded-lg">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Name
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Description
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Products Count
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Actions
                                </th>
                            </tr>
                        </thead>
                        <tbody id="categories-table" class="bg-white divide-y divide-gray-200">
                            <!-- Categories will be populated here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
    </div>

    <!-- Product Modal -->
    <div id="productModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 id="productModalTitle" class="text-lg font-medium text-gray-900">Add New Product</h3>
                </div>
                <form id="productForm" class="px-6 py-4" enctype="multipart/form-data">
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Product Name</label>
                        <input type="text" id="productName" required
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Category</label>
                        <select id="productCategory" name="category" required
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="">Select Category</option>
                            <!-- Categories will be populated here -->
                        </select>
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Price (â‚¹)</label>
                        <input type="number" id="productPrice" required min="0" step="0.01"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Stock Quantity</label>
                        <input type="number" id="productStock" required min="0"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                        <textarea id="productDescription" rows="3"
                                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Product Images</label>
                        <input type="file" id="productImage" name="images" accept="image/*" multiple
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <div id="imagePreviewContainer" class="mt-2 grid grid-cols-4 gap-2">
                            <!-- Existing images will be shown here -->
                        </div>
                        <input type="hidden" id="deletedImages" name="deletedImages" value="[]">
                    </div>
                </form>
                <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                    <button onclick="closeModal('productModal')" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200">
                        Cancel
                    </button>
                    <button onclick="saveProduct()" 
                            class="px-4 py-2 text-sm font-medium text-white bg-blue-500 rounded-md hover:bg-blue-600">
                        Save Product
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Category Modal -->
    <div id="categoryModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
            <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 id="categoryModalTitle" class="text-lg font-medium text-gray-900">Add New Category</h3>
                </div>
                <form id="categoryForm" class="px-6 py-4">
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Category Name</label>
                        <input type="text" id="categoryName" required
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                        <textarea id="categoryDescription" rows="3"
                                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
                    </div>
                </form>
                <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
                    <button onclick="closeModal('categoryModal')" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200">
                        Cancel
                    </button>
                    <button onclick="saveCategory()" 
                            class="px-4 py-2 text-sm font-medium text-white bg-blue-500 rounded-md hover:bg-blue-600">
                        Save Category
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Replace the sample data arrays with empty arrays
        let products = [];
        let categories = [];

        // Global variables for tracking edit state
        let currentEditingProduct = null;
        let currentEditingCategory = null;

        // Notification function
        function showNotification(message, type = 'success') {
            const notificationDiv = document.createElement('div');
            notificationDiv.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg ${
                type === 'success' ? 'bg-green-500' : 'bg-red-500'
            } text-white z-50`;
            notificationDiv.textContent = message;
            
            document.body.appendChild(notificationDiv);
            
            // Remove notification after 3 seconds
            setTimeout(() => {
                notificationDiv.remove();
            }, 3000);
        }

        // Load products from database
        async function loadProducts() {
            try {
                const response = await fetch('/admin/products');
                const data = await response.json();
                products = data;
                
                const tbody = document.getElementById('products-table');
                tbody.innerHTML = '';
                
                if (products.length === 0) {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="5" class="px-6 py-8 text-center text-gray-500">
                                No products found. Add your first product to get started.
                            </td>
                        </tr>
                    `;
                    return;
                }

                // Replace the products.forEach section in loadProducts function
                products.forEach(product => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                ${product.images && product.images.length > 0 ? 
                                    `<img src="${product.images[0].path}" alt="${product.name}" class="w-12 h-12 object-cover rounded mr-3"/>` :
                                    '<div class="text-2xl mr-3">ðŸŒ¸</div>'
                                }
                                <div class="text-sm font-medium text-gray-900">${product.name}</div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
                                ${product.categories.map(cat => cat.name).join(', ') || 'Uncategorized'}
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            â‚¹${product.price}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            ${product.quantity}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button onclick="editProduct('${product._id}')" class="text-indigo-600 hover:text-indigo-900 mr-3">
                                Edit
                            </button>
                            <button onclick="deleteProduct('${product._id}')" class="text-red-600 hover:text-red-900">
                                Delete
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading products:', error);
                showNotification('Error loading products', 'error');
            }
        }

        // Load categories from database
        async function loadCategories() {
            try {
                const response = await fetch('/admin/categories');
                const data = await response.json();
                categories = data;
                
                const tbody = document.getElementById('categories-table');
                tbody.innerHTML = '';
                
                if (categories.length === 0) {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="4" class="px-6 py-8 text-center text-gray-500">
                                No categories found. Add your first category to get started.
                            </td>
                        </tr>
                    `;
                    return;
                }

                categories.forEach(category => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <span class="text-2xl mr-2">${category.emoji || 'ðŸ“¦'}</span>
                                <span class="text-sm font-medium text-gray-900">${category.name}</span>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            ${category.description || '-'}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            ${category.itemCount || 0}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button onclick="editCategory('${category._id}')" 
                                    class="text-indigo-600 hover:text-indigo-900 mr-3">
                                Edit
                            </button>
                            <button onclick="deleteCategory('${category._id}')" 
                                    class="text-red-600 hover:text-red-900">
                                Delete
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });

                // Update category options in product form if it exists
                const categorySelect = document.getElementById('productCategory');
                if (categorySelect) {
                    categorySelect.innerHTML = '<option value="">Select Category</option>';
                    categories.forEach(category => {
                        categorySelect.innerHTML += `
                            <option value="${category._id}">${category.name}</option>
                        `;
                    });
                }

            } catch (error) {
                console.error('Error loading categories:', error);
                showNotification('Error loading categories', 'error');
            }
        }

        // Save product to database
        async function saveProduct() {
            try {
                const formData = new FormData(document.getElementById('productForm'));
                
                // Explicitly add the category value
                formData.set('categories', document.getElementById('productCategory').value);
                
                // Handle multiple images
                const imageInput = document.getElementById('productImage');
                if (imageInput.files.length > 0) {
                    // Remove any existing 'images' entries
                    formData.delete('images');
                    Array.from(imageInput.files).forEach(file => {
                        formData.append('images', file);
                    });
                }

                // Add deleted images if editing
                if (currentEditingProduct) {
                    const deletedImages = document.getElementById('deletedImages').value;
                    if (deletedImages && deletedImages !== '[]') {
                        formData.append('deletedImages', deletedImages);
                    }
                }

                // Add image order if editing
                if (currentEditingProduct && currentEditingProduct.images) {
                    formData.append('imageOrder', JSON.stringify(
                        currentEditingProduct.images.map(img => img.filename)
                    ));
                }

                const url = currentEditingProduct ? 
                    `/admin/products/${currentEditingProduct._id}` : 
                    '/admin/products';
                
                const method = currentEditingProduct ? 'PUT' : 'POST';

                const response = await fetch(url, {
                    method: method,
                    body: formData
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to save product');
                }

                await loadProducts();
                closeModal('productModal');
                showNotification(
                    currentEditingProduct ? 'Product updated successfully!' : 'Product added successfully!', 
                    'success'
                );

                currentEditingProduct = null;
            } catch (error) {
                console.error('Error saving product:', error);
                showNotification(error.message || 'Error saving product', 'error');
            }
        }

        // Save category to database
        async function saveCategory() {
            try {
                const categoryData = {
                    name: document.getElementById('categoryName').value,
                    description: document.getElementById('categoryDescription').value,
                    emoji: 'ðŸ“¦' // Default emoji
                };

                const url = window.currentEditingCategory ? 
                    `/admin/categories/${window.currentEditingCategory._id}` : 
                    '/admin/categories';
                
                const method = window.currentEditingCategory ? 'PUT' : 'POST';

                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(categoryData)
                });

                if (!response.ok) throw new Error('Failed to save category');

                await loadCategories();
                closeModal('categoryModal');
                showNotification('Category saved successfully!', 'success');
                
                // Refresh products to update category names
                await loadProducts();
            } catch (error) {
                console.error('Error saving category:', error);
                showNotification('Error saving category', 'error');
            }
        }

        // Delete product from database
        async function deleteProduct(id) {
            if (confirm('Are you sure you want to delete this product?')) {
                try {
                    const response = await fetch(`/admin/products/${id}`, {
                        method: 'DELETE'
                    });

                    if (!response.ok) throw new Error('Failed to delete product');

                    await Promise.all([
                        loadProducts(),
                        loadCategories() // Refresh categories to update item counts
                    ]);
                    
                    showNotification('Product deleted successfully!', 'success');
                } catch (error) {
                    console.error('Error deleting product:', error);
                    showNotification('Error deleting product', 'error');
                }
            }
        }

        // Edit product
        function editProduct(productId) {
            const product = products.find(p => p._id === productId);
            if (!product) return;

            currentEditingProduct = product;
            
            // Fill form with product data
            document.getElementById('productModalTitle').textContent = 'Edit Product';
            document.getElementById('productName').value = product.name;
            document.getElementById('productPrice').value = product.price;
            document.getElementById('productDescription').value = product.description || '';
            document.getElementById('productCategory').value = product.categories[0]?._id || '';
            document.getElementById('productStock').value = product.quantity;
            
            // Clear previous image preview
            document.getElementById('productImage').value = '';
            const imagePreviewContainer = document.getElementById('imagePreviewContainer');
            imagePreviewContainer.innerHTML = '';
            
            // Show existing images
            if (product.images && product.images.length > 0) {
                product.images.forEach(image => {
                    addImagePreview(image.path, image.filename, false);
                });
            }
            
            document.getElementById('productModal').classList.remove('hidden');
        }

        // Edit category
        function editCategory(categoryId) {
            const category = categories.find(c => c._id === categoryId);
            if (!category) return;

            window.currentEditingCategory = category;
            
            document.getElementById('categoryModalTitle').textContent = 'Edit Category';
            document.getElementById('categoryName').value = category.name;
            document.getElementById('categoryDescription').value = category.description || '';
            
            document.getElementById('categoryModal').classList.remove('hidden');
        }

        // Delete category
        async function deleteCategory(categoryId) {
            if (!confirm('Are you sure you want to delete this category? This will affect all products in this category.')) {
                return;
            }

            try {
                const response = await fetch(`/admin/categories/${categoryId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) throw new Error('Failed to delete category');

                await loadCategories();
                await loadProducts(); // Refresh products as they might be affected
                showNotification('Category deleted successfully!', 'success');
            } catch (error) {
                console.error('Error deleting category:', error);
                showNotification('Error deleting category', 'error');
            }
        }

        // Tab switching functionality
        function switchTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.add('hidden');
            });
            
            // Remove active state from all tab buttons
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.remove('active', 'border-blue-500', 'text-blue-600');
                button.classList.add('border-transparent', 'text-gray-500');
            });
            
            // Show selected tab content and activate its button
            document.getElementById(`${tabName}-content`).classList.remove('hidden');
            const activeTab = document.getElementById(`${tabName}-tab`);
            activeTab.classList.add('active', 'border-blue-500', 'text-blue-600');
            activeTab.classList.remove('border-transparent', 'text-gray-500');
            
            // Load data based on active tab
            if (tabName === 'products') {
                loadProducts();
            } else if (tabName === 'categories') {
                loadCategories();
            }
        }

        // Modal handling functions
        async function showAddProductModal() {
            try {
                // Load categories first
                if (categories.length === 0) {
                    await loadCategories();
                }
                
                const modal = document.getElementById('productModal');
                document.getElementById('productModalTitle').textContent = 'Add New Product';
                document.getElementById('productForm').reset();
                
                // Ensure category select is populated
                const categorySelect = document.getElementById('productCategory');
                categorySelect.innerHTML = '<option value="">Select Category</option>';
                categories.forEach(category => {
                    categorySelect.innerHTML += `
                        <option value="${category._id}">${category.name}</option>
                    `;
                });
                
                modal.classList.remove('hidden');
            } catch (error) {
                console.error('Error preparing product modal:', error);
                showNotification('Error loading categories', 'error');
            }
        }

        function showAddCategoryModal() {
            const modal = document.getElementById('categoryModal');
            document.getElementById('categoryModalTitle').textContent = 'Add New Category';
            document.getElementById('categoryForm').reset();
            modal.classList.remove('hidden');
        }

        function closeModal(modalId) {
            if (modalId === 'productModal') {
                currentEditingProduct = null;
            } else if (modalId === 'categoryModal') {
                currentEditingCategory = null;
            }
            document.getElementById(modalId).classList.add('hidden');
        }

        // Add these functions to your existing script
        function handleImagePreview(files) {
            const container = document.getElementById('imagePreviewContainer');
            
            // Clear existing preview if not editing
            if (!currentEditingProduct) {
                container.innerHTML = '';
            }

            // Add new image previews
            Array.from(files).forEach(file => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    addImagePreview(e.target.result, file.name, true);
                };
                reader.readAsDataURL(file);
            });
        }

        function addImagePreview(src, filename, isNew = false) {
            const container = document.getElementById('imagePreviewContainer');
            const wrapper = document.createElement('div');
            wrapper.className = 'relative group image-wrapper';
            wrapper.innerHTML = `
                <img src="${src}" alt="Preview" class="w-full h-24 object-cover rounded">
                <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center gap-2">
                    <button type="button" 
                            onclick="removeImage('${filename}', ${isNew})" 
                            class="remove-button bg-red-500 text-white rounded-full w-8 h-8 flex items-center justify-center hover:bg-red-600">
                        Ã—
                    </button>
                    ${!isNew ? `
                    <button type="button" 
                            onclick="setDefaultImage('${filename}')" 
                            class="star-button ${currentEditingProduct?.images?.[0]?.filename === filename ? 'bg-yellow-500' : 'bg-blue-500'} text-white rounded-full w-8 h-8 flex items-center justify-center hover:bg-blue-600">
                        â˜…
                    </button>
                    ` : ''}
                </div>
            `;
            container.appendChild(wrapper);
        }

        // Add these functions after handleImagePreview function

        function removeImage(filename, isNew) {
            try {
                if (!isNew) {
                    // Handle existing image removal
                    const deletedImages = JSON.parse(document.getElementById('deletedImages').value || '[]');
                    if (!deletedImages.includes(filename)) {
                        deletedImages.push(filename);
                        document.getElementById('deletedImages').value = JSON.stringify(deletedImages);
                    }
                }

                // Remove the image preview from DOM
                const container = document.getElementById('imagePreviewContainer');
                const imageWrapper = Array.from(container.children).find(
                    wrapper => wrapper.querySelector('img').src.includes(filename)
                );
                if (imageWrapper) {
                    imageWrapper.remove();
                }
            } catch (error) {
                console.error('Error removing image:', error);
                showNotification('Error removing image', 'error');
            }
        }

        function setDefaultImage(filename) {
            try {
                const container = document.getElementById('imagePreviewContainer');
                const images = container.querySelectorAll('.image-wrapper');
                
                // Remove star from all images
                images.forEach(wrapper => {
                    const starButton = wrapper.querySelector('.star-button');
                    if (starButton) {
                        starButton.classList.remove('bg-yellow-500');
                        starButton.classList.add('bg-blue-500');
                    }
                });

                // Add star to selected image
                const selectedWrapper = Array.from(container.children).find(
                    wrapper => wrapper.querySelector('img').src.includes(filename)
                );
                if (selectedWrapper) {
                    const starButton = selectedWrapper.querySelector('.star-button');
                    if (starButton) {
                        starButton.classList.remove('bg-blue-500');
                        starButton.classList.add('bg-yellow-500');
                    }
                }

                // Update the images order in currentEditingProduct
                if (currentEditingProduct && currentEditingProduct.images) {
                    const imageIndex = currentEditingProduct.images.findIndex(img => img.filename === filename);
                    if (imageIndex > -1) {
                        const image = currentEditingProduct.images.splice(imageIndex, 1)[0];
                        image.isDefault = true;
                        currentEditingProduct.images.unshift(image);
                        
                        // Remove default from other images
                        currentEditingProduct.images.forEach((img, idx) => {
                            if (idx !== 0) img.isDefault = false;
                        });
                    }
                }
            } catch (error) {
                console.error('Error setting default image:', error);
                showNotification('Error setting default image', 'error');
            }
        }

        // Update the saveProduct function to include image order
        async function saveProduct() {
            try {
                const formData = new FormData(document.getElementById('productForm'));
                
                // Add basic product data
                formData.set('categories', document.getElementById('productCategory').value);
                
                // Handle multiple images
                const imageInput = document.getElementById('productImage');
                if (imageInput.files.length > 0) {
                    formData.delete('images');
                    Array.from(imageInput.files).forEach(file => {
                        formData.append('images', file);
                    });
                }

                // Add deleted images if editing
                const deletedImages = document.getElementById('deletedImages').value;
                if (deletedImages && deletedImages !== '[]') {
                    formData.append('deletedImages', deletedImages);
                }

                // Add image order if editing
                if (currentEditingProduct && currentEditingProduct.images) {
                    formData.append('imageOrder', JSON.stringify(
                        currentEditingProduct.images.map(img => img.filename)
                    ));
                }

                const url = currentEditingProduct ? 
                    `/admin/products/${currentEditingProduct._id}` : 
                    '/admin/products';
                
                const method = currentEditingProduct ? 'PUT' : 'POST';

                const response = await fetch(url, {
                    method: method,
                    body: formData
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to save product');
                }

                await loadProducts();
                closeModal('productModal');
                showNotification(
                    currentEditingProduct ? 'Product updated successfully!' : 'Product added successfully!', 
                    'success'
                );

                currentEditingProduct = null;
            } catch (error) {
                console.error('Error saving product:', error);
                showNotification(error.message || 'Error saving product', 'error');
            }
        }

        // Initialize the dashboard when the page loads
        document.addEventListener('DOMContentLoaded', async function() {
            try {
                // Load both products and categories on initial load
                await Promise.all([
                    loadProducts(),
                    loadCategories()
                ]);
                
                // Set up event listeners
                document.addEventListener('keydown', function(e) {
                    if (e.key === 'Escape') {
                        document.querySelectorAll('.modal').forEach(modal => {
                            modal.classList.add('hidden');
                        });
                    }
                });
            } catch (error) {
                console.error('Error initializing dashboard:', error);
                showNotification('Error loading data', 'error');
            }
        });
    </script>
</body>
</html>